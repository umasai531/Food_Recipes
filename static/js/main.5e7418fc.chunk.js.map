{"version":3,"sources":["RecipeTile.js","App.js","reportWebVitals.js","index.js"],"names":["RecipeTile","recipe","match","className","onClick","window","open","src","App","useState","query","setquery","recipes","setRecipes","healthLabels","sethealthLabels","url","a","Axios","get","result","data","hits","console","log","onSubmit","e","preventDefault","getRecipes","type","placeholder","value","onChange","target","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSAEe,SAASA,EAAT,GAA+B,IAAVC,EAAS,EAATA,OAChC,OAC8D,MAA1DA,EAAM,OAAN,MAA0BC,MAAM,0BAChC,sBAAKC,UAAU,aAAYC,QAAS,WAChCC,OAAOC,KAAKL,EAAM,OAAN,MADhB,UAGI,qBAAKE,UAAU,kBAAmBI,IAAKN,EAAM,OAAN,QACvC,mBAAGE,UAAU,mBAAb,SAAiCF,EAAM,OAAN,WCgD9BO,MArDf,WACE,MAAyBC,mBAAS,IAAlC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAAwCJ,mBAAS,SAAjD,mBAAOK,EAAP,KAAqBC,EAArB,KAGIC,EAAI,mCAAD,OAAoCN,EAApC,mBAFW,WAEX,oBADY,mCACZ,mBAAkGI,GAN5F,4CAOb,4BAAAG,EAAA,sEAEmBC,IAAMC,IAAIH,GAF7B,OAEMI,EAFN,OAGEP,EAAWO,EAAOC,KAAKC,MACvBC,QAAQC,IAAIJ,EAAOC,MAJrB,4CAPa,sBAiBb,OACE,sBAAKlB,UAAU,MAAf,UACC,iEACA,uBAAMA,UAAU,kBAAkBsB,SAPtB,SAACC,GACdA,EAAEC,iBAdS,mCAeXC,IAKC,UACE,uBACAzB,UAAU,aACV0B,KAAK,OACLC,YAAY,mBACZC,MAAOrB,EACPsB,SAAU,SAACN,GAAD,OAAOf,EAASe,EAAEO,OAAOF,UACnC,uBAAO5B,UAAU,cAAc0B,KAAK,SAASE,MAAM,WACnD,yBAAQ5B,UAAU,oBAAlB,UACE,wBAAQC,QAAS,kBAAKW,EAAgB,UAAtC,mBACA,wBAAQX,QAAS,kBAAKW,EAAgB,eAAtC,wBACA,wBAAQX,QAAS,kBAAKW,EAAgB,UAAtC,mBACA,wBAAQX,QAAS,kBAAKW,EAAgB,eAAtC,wBACA,wBAAQX,QAAS,kBAAKW,EAAgB,gBAAtC,yBACA,wBAAQX,QAAS,kBAAKW,EAAgB,eAAtC,wBACA,wBAAQX,QAAS,kBAAKW,EAAgB,aAAtC,sBACA,wBAAQX,QAAS,kBAAKW,EAAgB,cAAtC,uBACA,wBAAQX,QAAS,kBAAKW,EAAgB,aAAtC,sBACA,wBAAQX,QAAS,kBAAKW,EAAgB,gBAAtC,yBACA,wBAAQX,QAAS,kBAAKW,EAAgB,kBAAtC,2BACA,wBAAQX,QAAS,kBAAKW,EAAgB,aAAtC,4BAGJ,qBAAKZ,UAAU,eAAf,SACGS,EAAQsB,KAAI,SAACjC,GACb,OAAO,cAAC,EAAD,CAAYA,OAAQA,aCrCpBkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.5e7418fc.chunk.js","sourcesContent":["import React from 'react'\r\nimport './RecipeTile.css'\r\nexport default function RecipeTile({recipe}) {\r\n    return (\r\n        recipe[\"recipe\"][\"image\"].match(/\\.(jpeg|jpg|gif|png)$/)!=null && (\r\n        <div className='recipeTile'onClick={()=>{\r\n            window.open(recipe['recipe']['url'])\r\n        }}>\r\n            <img className='recipeTile__img'  src={recipe['recipe']['image']}/>\r\n            <p className='recipeTile__name'>{recipe[\"recipe\"][\"label\"]}</p>\r\n            \r\n        </div>\r\n        )\r\n    )\r\n}\r\n","import './App.css';\nimport Axios from \"axios\"\nimport {useState} from 'react' \nimport RecipeTile from './RecipeTile';\nfunction App() {\n  const [query, setquery]= useState(\"\")\n  const [recipes, setRecipes] = useState([])\n  const [healthLabels, sethealthLabels] = useState('vegan')\n  const YOUR_APP_ID=\"d8a312e5\";\n  const YOUR_APP_KEY=\"26e526e9e6a6426f8f3cb06b8d2f8944\"; \n  var url=`https://api.edamam.com/search?q=${query}&app_id=${YOUR_APP_ID}&app_key=${YOUR_APP_KEY}&health=${healthLabels}`\n  async function getRecipes()\n  {\n    var result=await Axios.get(url); \n    setRecipes(result.data.hits)\n    console.log(result.data)\n  }\n  const onSubmit=(e)=>{\n    e.preventDefault();\n    getRecipes();\n  }\n  return (\n    <div className=\"app\">\n     <h1>Food Recipes Plaza üçî</h1>\n     <form className='app__searchForm' onSubmit={onSubmit}>\n       <input \n       className='app__input'\n       type='text' \n       placeholder='Enter Ingredient' \n       value={query}\n       onChange={(e) => setquery(e.target.value)}></input>\n       <input className='app__submit' type='submit' value='Search'/>\n       <select className='app__healthLabels'>\n         <option onClick={() =>sethealthLabels('vegan')}>Vegan</option>\n         <option onClick={() =>sethealthLabels('vegetarian')}>Vegetarian</option>\n         <option onClick={() =>sethealthLabels('paleo')}>Paleo</option>\n         <option onClick={() =>sethealthLabels('dairy-free')}>Dairy-Free</option>\n         <option onClick={() =>sethealthLabels('gluten-free')}>Gluten-Free</option>\n         <option onClick={() =>sethealthLabels('wheat-free')}>Wheat-Free</option>\n         <option onClick={() =>sethealthLabels('fat-free')}>Fat-Free</option>\n         <option onClick={() =>sethealthLabels('low-sugar')}>Low-Sugar</option>\n         <option onClick={() =>sethealthLabels('egg-free')}>Egg-Free</option>\n         <option onClick={() =>sethealthLabels('peanut-free')}>Peanut-free</option>\n         <option onClick={() =>sethealthLabels('tree-nut-free')}>Tree-nut-free</option>\n         <option onClick={() =>sethealthLabels('soy-free')}>Soy-free</option>\n       </select>\n     </form>\n     <div className='app__recipes'>\n       {recipes.map((recipe) => {\n        return <RecipeTile recipe={recipe}/>;\n       \n       })}\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}